giga_empire_size_mult = {
	base = 0

	weight = trigger:empire_sprawl_over_cap

	multiply = value:giga_empire_size_mult_scaling

	min = 0
}
giga_empire_size_mult_scaling = {
	base = 1

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = empire_size_penalty_mult
		}
		mode = add
	}
}

# build speed reduction for the rogue AI PCC
giga_rogue_ai_computer_build_speed_mult = {
	base = 0.25

	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				is_deposit_type = d_giga_rogue_ai_relay_servers
			}
		}
		mode = multiply
	}

	max = 0.9
}

giga_count_resource = {
	# complex_trigger_modifier = {
	# 	trigger = has_resource
	# 	parameters = {
	# 		type = $resource$
	# 	}
	# 	mode = weight
	# }

	# since the above doesn't work (yet)... lol
	base = 0

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 0
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 1
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 2
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 3
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 4
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 5
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 6
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 7
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 8
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 9
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 10
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 11
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 12
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 13
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 14
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 15
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 16
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 17
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 18
		}
	}

	modifier = {
		add = 1
		has_resource = {
			type = $resource$
			amount > 19
		}
	}

	[[mult]
		multiply = $mult$
	]
}

giga_get_opinion_from_jobs = {
	base = 0

	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = giga_tooltips_influence_produces_add
		}
		mode = weight
	}
}

giga_bonus_desired_constructors_min = {
	base = 0

	# give some more early constructors to the frame for outposts and asteroids
	modifier = {
		has_origin = origin_frameworld
		add = 2
	}

	# more availability
	modifier = {
		has_technology = tech_mega_engineering
		add = value:giga_bonus_desired_constructors_min_mega_engineering
	}
}

giga_bonus_desired_constructors_min_mega_engineering = {
	base = 0

	# an additional 1 for every 4 systems
	add = trigger:controlled_systems
	mult = 0.25

	# limited to bonus build cap + 5 or 10, whichever is less
	max = value:giga_bonus_min_constructors_calc
	max = 10
}

giga_bonus_min_constructors_calc = {
	weight = modifier:country_megastructure_build_cap_add
	add = 5
}

# this is added to the vanilla max
giga_bonus_desired_constructors_max = {
	# give extra max to normal and awakened empires
	modifier = {
		or = {
			is_country_type = default
			is_country_type = awakened_fallen_empire
		}
		add = value:giga_bonus_desired_constructors_max_normal
	}
}

giga_bonus_desired_constructors_max_normal = {
	base = 0

	# an additional 1 for every 20 systems
	add = trigger:controlled_systems
	mult = 0.05

	# half that for awakened empires
	modifier = {
		is_country_type = awakened_fallen_empire
		mult = 0.5
	}

	# give at least bonus buildcap
	# this will scale with production for supertensiles automatically via the AI cap modifier
	modifier = {
		not = { has_global_flag = giga_buildcap_u }

		min = modifier:country_megastructure_build_cap_add
	}
	# or a lump sum if unlimited
	modifier = {
		has_global_flag = giga_buildcap_u

		min = 10
	}
}

# habitability ranking value for the giga_get_species_for_colony effect
# event_target:giga_target_planet is the prospective colony
# scope = species
giga_get_species_for_colony_habitability = {
	complex_trigger_modifier = {
		trigger = habitability
		trigger_scope = event_target:giga_target_planet
		parameters = {
			who = prev
		}
		mode = weight
	}
}

# scoring function for asteroids when building a Stellar Ring Habitat
# determines how much a consumed asteroid contributes to the planet size calculation
giga_orbital_asteroid_value = {
	weight = trigger:planet_size
	multiply = 0.4 # standard size appears to be 5, so 2 score per asteroid base

	modifier = {
		is_planet_class = pc_ice_asteroid
		multiply = 0.8
	}

	modifier = {
		is_planet_class = pc_crystal_asteroid
		multiply = 1.2
	}

	add = value:giga_count_resource|resource|minerals|mult|0.5|
	add = value:giga_count_resource|resource|energy|mult|0.25|
	add = value:giga_count_resource|resource|alloys|mult|1.0|

	# guilli's modifiers
	modifier = {
		has_modifier = gpm_large_asteroid
		multiply = 1.25
	}

	modifier = {
		has_modifier = gpm_asteroid_moon
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_metal_asteroid
		multiply = 1.5
	}

	modifier = {
		has_modifier = gpm_dense_core
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_hollow_structure
		multiply = 0.4
	}

	modifier = {
		has_modifier = gpm_crystallized_structure
		multiply = 1.1
	}

	modifier = {
		has_modifier = gpm_abandoned_mining_platforms
		multiply = 0.6
	}

	modifier = {
		has_modifier = gpm_spherical_asteroid
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_c_type_asteroid
		multiply = 0.75
	}

	modifier = {
		has_modifier = gpm_s_type_asteroid
		multiply = 1.2
	}

	modifier = {
		has_modifier = gpm_m_type_asteroid
		multiply = 1.5
	}

	modifier = {
		has_modifier = gpm_v_type_asteroid
		multiply = 0.75
	}
}

# 10 + value, up to 20, after which excess is square rooted
giga_orbital_size_calculation = {
	weight = giga_stellar_ring_value
	subtract = 20
	min = 0
	square_root = yes

	add = value:giga_orbital_size_calculation_a
	add = 10

	round = yes
}

giga_orbital_size_calculation_a = {
	weight = giga_stellar_ring_value
	max = 20
}

# number of viable source asteroids in the system, for gathering cost
giga_orbital_asteroid_count = {
	base = 1 # the one it's built on
	complex_trigger_modifier = {
		trigger = count_system_planet
		trigger_scope = solar_system
		parameters = {
			limit = {
				is_asteroid = yes
				is_moon = no
				is_colony = no
				nor = {
					has_planet_flag = has_megastructure
					has_planet_flag = megastructure
					has_anomaly = yes
					has_planet_flag = giga_remove_planet
				}
			}
		}
		mode = add
	}
}

giga_system_resettlement = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_resettlement
			}
		}

		add = solar_system.star.giga_system_resettlement
	}
}
giga_system_resettlement_calc = {
	weight = modifier:giga_system_resettlement_unemployed_mult
}

giga_system_bio_trophy_bonus = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_bio_trophy_bonus
			}
		}

		add = solar_system.star.giga_system_bio_trophy_bonus
	}
}
giga_system_bio_trophy_bonus_calc = {
	weight = modifier:giga_system_bio_trophy_propagation
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = bio_trophy
		}
		mode = mult
		mult = 0.01 # 1% bonus per job
	}
}

giga_system_habitat_amenities = {
	base = 0

	modifier = {
		exists = solar_system
		solar_system = {
			exists = star
			star = {
				is_variable_set = giga_system_habitat_amenities
			}
		}

		add = solar_system.star.giga_system_habitat_amenities
	}
}

giga_system_habitat_amenities_calc = {
	weight = modifier:giga_system_habitat_amenities_add
	add = modifier:giga_system_habitat_amenities_no_happiness_add
}

district_giga_planet_alloys_artisan_replacement = {
	base = 0

	modifier = {
		check_modifier_value = {
			modifier = district_giga_planet_alloys_artisan_replacement
			value > 0
		}
		weight = 1
	}
}

giga_job_scaling_per_building = {
	base = 0

	complex_trigger_modifier = {
		trigger = num_buildings
		parameters = {
			type = $BUILDING$
		}
		mode = weight
	}

	multiply = modifier:giga_planet_job_size
}

giga_job_scaling_country_modifier = {
	base = 0

	modifier = {
		exists = owner
		weight = owner.modifier:$MODIFIER$
	}

	multiply = modifier:giga_planet_job_size
}