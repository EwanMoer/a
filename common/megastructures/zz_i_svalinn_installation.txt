### Svalinn Defense Installation costs and build times
## platform
@svalinn_platform_build_time = 1800
@svalinn_platform_alloys = 10000
@svalinn_platform_influence = 250

## normal first stage
@svalinn_scaffold_build_time = 1800
@svalinn_scaffold_alloys = 30000 # bunkers and guns
@svalinn_scaffold_minerals = 5000 # misc planet construction
## normal finish
@svalinn_finish_build_time = 1800
@svalinn_finish_alloys = 30000 # bunkers and guns
@svalinn_finish_minerals = 20000 # terraforming and excavation
@svalinn_finish_energy = 10000 # "antimatter" representation

## ringworld first stage
@svalinn_ringworld_scaffold_build_time = 2500
@svalinn_ringworld_scaffold_alloys = 15000 # bunkers and guns
@svalinn_ringworld_scaffold_minerals = 5000 # misc planet construction
## ringworld finish
@svalinn_ringworld_finish_build_time = 4700
@svalinn_ringworld_finish_alloys = 30000 # bunkers and guns
@svalinn_ringworld_finish_minerals = 20000 # terraforming and excavation
@svalinn_ringworld_finish_energy = 10000 # "antimatter" representation



### Svalinn construction upkeeps
## platform
@svalinn_platform_upkeep_energy = 25
@svalinn_platform_upkeep_alloys = 10

## normal first stage
@svalinn_scaffold_upkeep_energy = 50 # keeping rings and stuff suspended
@svalinn_scaffold_upkeep_alloys = 10
## normal finish
# megastructure deleted when done

## ringworld first stage
@svalinn_ringworld_scaffold_upkeep_energy = 50 # keeping rings and stuff suspended
@svalinn_ringworld_scaffold_upkeep_alloys = 10
## ringworld finish
# megastructure deleted when done



svalinn_platform_0 = {
	entity = "giga_consite_5_5_entity"
	construction_entity = "giga_consite_5_5_entity"
	place_entity_on_planet_plane = no
	entity_offset = { x = 0 y = 0 }
	portrait = "GFX_megastructure_construction_background"

	prerequisites = { giga_tech_svalinn_installation }

	build_time = @svalinn_platform_build_time
	resources = {
		category = giga_svalinn_installation
		cost = {
			alloys = @svalinn_platform_alloys
			influence = @svalinn_platform_influence
			unity = @giga_giga_unity_cost
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|@svalinn_platform_alloys| }
		cost = { unity = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|unity|AMOUNT|@giga_big_mega_start_unity_cost| }
		upkeep = { energy = @svalinn_platform_upkeep_energy alloys = @svalinn_platform_upkeep_alloys }
	}

	on_build_start = {
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = alloys AMOUNT = @svalinn_platform_alloys }
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = unity  AMOUNT = @giga_big_mega_start_unity_cost }
		apply_giga_bulwark_trad_build_speed = yes
	}
	on_build_cancel = {
		giga_ai_savings_refund = { CATEGORY = military RESOURCE = alloys }
		giga_ai_savings_refund = { CATEGORY = military RESOURCE = unity }
	}

	potential = {
		has_technology = giga_tech_svalinn_installation # this needs galactic wonders, full-blown megastructure
		NOT = { has_global_flag = svalinn_disabled }
		is_giga_one_planet_origin = no
		OR = {
			check_variable = { which = giga_svalinn_cap value = 0 } # No Cap
			check_variable = { which = giga_current_svalinn value < giga_svalinn_cap }
		}
	}

	possible = {
		custom_tooltip = { fail_text = "requires_inside_border"		is_inside_border = from }
		custom_tooltip = {
			fail_text = "requires_not_capped"
			from = {
				OR = {
					check_variable = { which = giga_svalinn_cap value = 0 } # No Cap
					check_variable = { which = giga_current_svalinn value < giga_svalinn_cap }
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			# anomaly check
			custom_tooltip = { fail_text = "requires_no_anomaly"					has_anomaly = no }
			# survey check
			custom_tooltip = { fail_text = "requires_surveyed_planet"				is_surveyed = { who = prev.from status = yes } }
			# built on a star
			custom_tooltip = { fail_text = "must_build_around_star"					is_star = yes }
			# deliberate: only checking if the central structure is a mega
			# NOT if it has a mega orbiting - this is to allow building a defense installation next to a system with a dyson or whatever
			custom_tooltip = { fail_text = "requires_no_existing_megastructure"		NOT = { has_planet_flag = megastructure } }
		}
	}

	ai_weight = {
		weight = value:giga_ai_base_giga

		#mult = value:giga_ai_upkeep|RESOURCE|energy|AMOUNT|3000|MIN|0.5|
		#mult = value:giga_ai_upkeep|RESOURCE|engineering_research|AMOUNT|3000|
		#mult = value:giga_ai_output|RESOURCE|minerals|AMOUNT|1500|MIN|0.75|
		mult = value:giga_ai_prevent_spam|MEGA|svalinn_installation|
		mult = value:giga_ai_militarist_plus

		## Do we want the production - makes some influence so boost if needing that
		modifier = { factor = 2.00	from = { has_monthly_income = { resource = influence value < 2 } } }

		## Is this system a good location?
		# border with someone else
		modifier = { factor = 500	any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } }
		# choke point system function
		modifier = { factor = 50 	is_bottleneck_system = yes }
		# has gateway, l-gate, primordial pillar in system, so fortify
		modifier = { factor = 10
			any_megastructure = {
				OR = { 
					is_megastructure_type = gateway_final
					is_megastructure_type = gateway_restored
					is_megastructure_type = lgate_base
					is_megastructure_type = ehof_pgate_unknown
					is_megastructure_type = ehof_pgate_gateway
				}
			}
		}
		# two jumps away owned by somebody else too
		modifier = { factor = 1.5	any_neighbor_system = { any_neighbor_system = { exists = owner NOT = { owner = { is_same_value = from } } } } }
		# AI decided to fortify this system for some reason
		modifier = { factor = 5  starbase = { has_starbase_size >= starbase_starfortress } }
		# Big worlds make good fortresses, but small ones in the case of protecting a larger world work as well
		modifier = { factor = 5	any_system_planet = { habitable_planet = yes planet_size >= 25 } }
		modifier = { factor = 0.1
			AND = {
				any_system_planet = { 			habitable_planet = yes 	planet_size < 18 }
				NOT = { any_system_planet = { 	habitable_planet = yes 	planet_size >= 20 } }
			}
		}
		# lots of planets
		modifier = { factor = 10
			count_system_planet = {
				limit = {
					habitable_planet = yes
				}
				count >= 5
			}
		}
		# is capital, but only with a second planet to fortify
		modifier = {
			factor = 3
			solar_system = {
				exists = owner
				is_same_value = owner.capital_scope.solar_system
				count_system_planet = {
					limit = {
						habitable_planet = yes
					}
					count >= 2
				}
			}
		}
		# don't turn your only planet into a Svalinn (even if it's pretty funny)
		modifier = {
			factor = 0
			solar_system = {
				exists = owner
				is_same_value = owner.capital_scope.solar_system
				count_system_planet = {
					limit = {
						habitable_planet = yes
					}
					count = 1
				}
			}
		}
		# Check the planet designation
		modifier = { factor = 5.00	any_system_planet = { has_designation = col_fortress } }

		## Do we lean towards this from federation/ethic/civic?
		modifier = { factor = value:giga_ai_base_continue	from = { has_country_flag = pangalactic_defense_league } }
		modifier = { factor = 2		from = { has_federation = yes federation = { has_federation_type = hegemony_federation } } }
		modifier = { factor = 3		from = { has_federation = yes federation = { has_federation_type = military_federation } } }
		modifier = { factor = 5		from = { has_ethic = ethic_fanatic_militarist } }
		modifier = { factor = 3		from = { has_ethic = ethic_militarist } }
		modifier = { factor = 2		from = { has_ethic = ethic_fanatic_xenophobe } }
		modifier = { factor = 1.5	from = { has_ethic = ethic_xenophobe } }
		modifier = { factor = 0.1	from = { has_ethic = ethic_fanatic_xenophile } }
		modifier = { factor = 0.5	from = { has_ethic = ethic_xenophile } }
		modifier = { factor = 0.5	from = { has_ethic = ethic_fanatic_pacifist } }
		modifier = { factor = 0.1	from = { has_ethic = ethic_pacifist } }
		modifier = { factor = 1.5	from = { has_civic = civic_citizen_service } }
		modifier = { factor = 20	from = { has_civic = civic_inwards_perfection } }

		# Don't care about total number

		# AI spam controls
		modifier = { factor = 0.00 from = { has_country_flag = has_recently_built_svalinn_installation } }
		# cannot comply building in progress
		#modifier = {
			#factor = 0
			#from = {
				#has_svalinn_megastructure = yes
			#}
		#}
	}

	# on_build_start = {  }

	on_build_complete = {
		save_event_target_as = giga_system
		fromfrom.planet = {
			save_event_target_as = giga_planet
			if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
			giga_set_has_mega_flag = yes
			set_planet_flag = has_svalinn_platform_mega # Has the construction site
		}
		from = {
			country_event = { id = giga_dialog.5001 } # notification
			set_timed_country_flag = { flag = has_recently_built_svalinn years = 10 }
			change_variable = { which = giga_current_svalinn value = 1 }
		}
	}
}

svalinn_world_1 = {
	entity = "pc_giga_svalinn_world_main_features_entity"
	construction_entity = "pc_giga_svalinn_world_main_features_entity"
	place_entity_on_planet_plane = yes
	entity_offset = { x = 0 y = 0 }
	scales_with_planet = yes
	portrait = "GFX_spaceport_background"
	upgrade_from = { svalinn_world_0 }

	build_time = @svalinn_scaffold_build_time
	resources = {
		category = giga_megastructures
		cost = {
			alloys = @svalinn_scaffold_alloys
			minerals = @svalinn_scaffold_minerals
			unity = @giga_big_mega_unity_cost
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|@svalinn_scaffold_alloys| }
		cost = { unity = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|unity|AMOUNT|@giga_big_mega_unity_cost| }
		upkeep = {
			energy = @svalinn_scaffold_upkeep_energy
			alloys = @svalinn_scaffold_upkeep_alloys
		}
	}

	on_build_start = {
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = alloys AMOUNT = @svalinn_platform_alloys }
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = unity  AMOUNT = @giga_big_mega_start_unity_cost }
		apply_giga_bulwark_trad_build_speed = yes
	}

	potential = { NOT = { has_global_flag = svalinn_disabled } }
	possible = { from = { has_technology = giga_tech_svalinn_world } }

	ai_weight = { factor = 10000 } # If we can build it, we will finish it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = { country_event = { id = giga_dialog.5002 } }	# Notification
	}
}

svalinn_world_2 = {
	entity = ""
	construction_entity = "pc_giga_svalinn_world_full_features_entity"
	place_entity_on_planet_plane = yes
	entity_offset = { x = 0 y = 0 }
	scales_with_planet = yes
	portrait = "GFX_spaceport_background"
	upgrade_from = { svalinn_world_1 }

	build_time = @svalinn_finish_build_time
	resources = {
		category = giga_megastructures
		cost = {
			alloys = @svalinn_finish_alloys
			minerals = @svalinn_finish_minerals
			energy = @svalinn_finish_energy
			unity = @giga_big_mega_unity_cost
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|@svalinn_finish_alloys| }
		cost = { unity = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|unity|AMOUNT|@giga_big_mega_unity_cost| }
	}

	on_build_start = {
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = alloys AMOUNT = @svalinn_finish_alloys }
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = unity  AMOUNT = @giga_big_mega_unity_cost }
		apply_giga_bulwark_trad_build_speed = yes
	}

	potential = { NOT = { has_global_flag = svalinn_disabled } }
	possible = { from = { has_technology = giga_tech_svalinn_world } }

	ai_weight = { factor = 10000 } # If we can build it, we will finish it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = {
			country_event = { id = giga_dialog.5003 }				# Notification
			set_country_flag = has_built_or_repaired_gigastructure	# Allows Gigastructural Constructs
			change_variable = { which = svalinn_world value = 1 }
			save_event_target_as = svalinn_world_owner
			# if = {
			# 	limit = {
			# 		NOR = {
			# 			has_global_flag = giga_achievements_disabled
			# 			has_country_flag = giga_achievement_77
			# 		}
			# 	}
			# 	set_country_flag = giga_achievement_77 # CHANGE THIS it triggers PCC achievement right now
			# 	set_timed_country_flag = { flag = giga_achievement_77_notification days = 30 }
			# 	giga_achievement_sound = yes
			# }
		}
		fromfrom.planet = {
			# change the planet class depending on what is being converted
			set_giga_svalinn_planet_class = yes
			set_planet_flag = megastructure
			set_planet_flag = giga_planet_mega

			init_giga_svalinn = yes
		}
		remove_megastructure = fromfrom
		fromfrom.planet = {
			giga_clear_has_mega_flag = yes
		}
	}
}

### Ringworld Branch ###
svalinn_world_ringworld_0 = {
	entity = "giga_consite_5_5_entity"
	construction_entity = "giga_consite_5_5_entity"
	place_entity_on_planet_plane = no
	entity_offset = { x = 0 y = 0 }
	portrait = "GFX_megastructure_construction_background"


	prerequisites = { giga_tech_svalinn_world }

	# dummy entity that can only be spawned in, these don't apply
	build_time = 1
	resources = {
		category = giga_megastructures
		cost = { alloys = 1 }
		upkeep = { energy = @svalinn_platform_upkeep_energy alloys = @svalinn_platform_upkeep_alloys }
	}

	potential = { always = no }

	ai_weight = { factor = 0 } # this is a dummy
	
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = { country_event = { id = giga_dialog.5004 } }	# Notification
	}
}

svalinn_world_ringworld_1 = {
	entity = "pc_giga_svalinn_ringworld_main_features_entity"
	construction_entity = "pc_giga_svalinn_ringworld_main_features_entity"
	place_entity_on_planet_plane = yes
	entity_offset = { x = 0 y = 0 }
	# ringworlds are fixed in size
	scales_with_planet = no
	portrait = "GFX_spaceport_background"
	upgrade_from = { svalinn_world_ringworld_0 }

	build_time = @svalinn_ringworld_scaffold_build_time
	resources = {
		category = giga_megastructures
		cost = {
			alloys = @svalinn_ringworld_scaffold_alloys
			minerals = @svalinn_ringworld_scaffold_minerals
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|@svalinn_ringworld_scaffold_alloys| }
		upkeep = {
			energy = @svalinn_ringworld_scaffold_upkeep_energy
			alloys = @svalinn_ringworld_scaffold_upkeep_alloys
		}
	}

	on_build_start = {
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = alloys AMOUNT = @svalinn_ringworld_scaffold_alloys }
		apply_giga_bulwark_trad_build_speed = yes
	}

	potential = { NOT = { has_global_flag = svalinn_disabled } }
	possible = { from = { has_technology = giga_tech_svalinn_world } }

	ai_weight = { factor = 10000 } # If we can build it, we will finish it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = { country_event = { id = giga_dialog.5005 } }	# Notification
	}
}

svalinn_world_ringworld_2 = {
	entity = ""
	construction_entity = "pc_giga_svalinn_ringworld_full_features_entity"
	place_entity_on_planet_plane = yes
	entity_offset = { x = 0 y = 0 }
	# ringworlds are fixed in size
	scales_with_planet = no
	portrait = "GFX_spaceport_background"
	upgrade_from = { svalinn_world_ringworld_1 }

	build_time = @svalinn_ringworld_finish_build_time
	resources = {
		category = giga_megastructures
		cost = {
			alloys = @svalinn_ringworld_finish_alloys
			minerals = @svalinn_ringworld_finish_minerals
			energy = @svalinn_ringworld_finish_energy
		}
		cost = { alloys = -1 multiplier = value:giga_ai_savings_cost|CATEGORY|military|RESOURCE|alloys|AMOUNT|@svalinn_ringworld_finish_alloys| }
	}

	on_build_start = {
		giga_ai_savings_withdraw = { CATEGORY = military RESOURCE = alloys AMOUNT = @svalinn_ringworld_finish_alloys }
		apply_giga_bulwark_trad_build_speed = yes
	}

	potential = { NOT = { has_global_flag = svalinn_disabled } }
	possible = { from = { has_technology = giga_tech_svalinn_world } }

	ai_weight = { factor = 10000 } # If we can build it, we will finish it
	on_build_complete = {
		save_event_target_as = giga_system
		if = { limit = { exists = fromfrom.planet } fromfrom.planet = { save_event_target_as = giga_planet } }
		from = {
			country_event = { id = giga_dialog.5006 }				# Notification
			set_country_flag = has_built_or_repaired_gigastructure	# Allows Gigastructural Constructs
			change_variable = { which = svalinn_world value = 1 }
			save_event_target_as = svalinn_world_owner
			# if = {
			# 	limit = {
			# 		NOR = {
			# 			has_global_flag = giga_achievements_disabled
			# 			has_country_flag = giga_achievement_77
			# 		}
			# 	}
			# 	set_country_flag = giga_achievement_77 # CHANGE THIS it triggers PCC achievement right now
			# 	set_timed_country_flag = { flag = giga_achievement_77_notification days = 30 }
			# 	giga_achievement_sound = yes
			# }
		}
		fromfrom.planet = {
			# change the planet class to ringworld
			set_giga_svalinn_planet_class = yes
			# perform other setup
			init_giga_svalinn = yes
		}
		# last, remove megastructure, everything from here is done by planet
		remove_megastructure = fromfrom
	}
}